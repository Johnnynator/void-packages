From 05233db2b25977037c7520a8316183636a262130 Mon Sep 17 00:00:00 2001
From: Giuseppe Penone <giuspen@gmail.com>
Date: Thu, 22 Aug 2024 22:58:03 +0100
Subject: [PATCH] fixed fmt issue on fs::path (#2548)

---
 src/ct/ct_app.cc               |  2 +-
 src/ct/ct_filesystem.cc        | 20 ++++++++++----------
 src/ct/ct_imports.cc           |  2 +-
 src/ct/ct_main_win_file.cc     |  8 ++++----
 src/ct/ct_storage_control.cc   |  8 ++++----
 src/ct/ct_storage_multifile.cc |  6 +++---
 6 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/src/ct/ct_app.cc b/src/ct/ct_app.cc
index 788e6092..66460cd0 100644
--- a/src/ct/ct_app.cc
+++ b/src/ct/ct_app.cc
@@ -152,7 +152,7 @@ void CtApp::on_activate()
             }
             else {
                 const fs::path last_doc_path{_pCtConfig->recentDocsFilepaths.front()};
-                spdlog::info("{} Last doc not found: {}", __FUNCTION__, last_doc_path);
+                spdlog::info("{} Last doc not found: {}", __FUNCTION__, last_doc_path.string());
                 _pCtConfig->recentDocsFilepaths.move_or_push_back(last_doc_path);
                 pAppWindow->menu_set_items_recent_documents();
             }
diff --git a/src/ct/ct_filesystem.cc b/src/ct/ct_filesystem.cc
index 5c5f5ea7..1b94a186 100644
--- a/src/ct/ct_filesystem.cc
+++ b/src/ct/ct_filesystem.cc
@@ -163,13 +163,13 @@ bool remove(const fs::path& path2rm)
 {
     if (fs::is_directory(path2rm)) {
         if (g_rmdir(path2rm.c_str()) != 0) {
-            spdlog::error("fs::remove: g_rmdir failed to remove {}", path2rm);
+            spdlog::error("fs::remove: g_rmdir failed to remove {}", path2rm.string());
             return false;
         }
     }
     else if (fs::exists(path2rm)) {
         if (::g_remove(path2rm.c_str()) != 0) {
-            spdlog::error("fs::remove: g_remove failed to remove {}", path2rm);
+            spdlog::error("fs::remove: g_remove failed to remove {}", path2rm.string());
             return false;
         }
     }
@@ -249,13 +249,13 @@ time_t getmtime(const path& p)
 std::uintmax_t file_size(const path& p)
 {
     if (fs::is_directory(p)) {
-        spdlog::error("fs::file_size: path is a directory, {}", p);
+        spdlog::error("fs::file_size: path is a directory, {}", p.string());
         return 0;
     }
 
     GStatBuf st;
     if (g_stat(p.c_str(), &st) != 0) {
-        spdlog::error("fs::file_size: g_stat failed, {}", p);
+        spdlog::error("fs::file_size: g_stat failed, {}", p.string());
         return 0;
     }
 
@@ -317,7 +317,7 @@ void _open_path_with_default_app(const fs::path& file_or_folder_path)
 // Open Filepath with External App
 void open_filepath(const fs::path& filepath, bool open_folder_if_file_not_exists, CtConfig* config)
 {
-    spdlog::debug("fs::open_filepath {}", filepath);
+    spdlog::debug("fs::open_filepath {}", filepath.string());
     if (config->filelinkCustomOn) {
         std::string cmd = fmt::sprintf(config->filelinkCustomAct, filepath.string());
         _locale_env_vars_set_for_external_cmd(true/*isPre*/);
@@ -344,7 +344,7 @@ void open_filepath(const fs::path& filepath, bool open_folder_if_file_not_exists
 // Open Folderpath with External App
 void open_folderpath(const fs::path& folderpath, CtConfig* config)
 {
-    spdlog::debug("fs::open_folderpath {}", folderpath);
+    spdlog::debug("fs::open_folderpath {}", folderpath.string());
     if (config->folderlinkCustomOn) {
         std::string cmd = fmt::sprintf(config->folderlinkCustomAct, folderpath.string());
         _locale_env_vars_set_for_external_cmd(true/*isPre*/);
@@ -361,12 +361,12 @@ void open_folderpath(const fs::path& folderpath, CtConfig* config)
 
 path prepare_export_folder(const path& dir_place, path new_folder, bool overwrite_existing)
 {
-    if (fs::is_directory(dir_place / new_folder))
-    {
+    const fs::path dir_place_new_folder = dir_place / new_folder;
+    if (fs::is_directory(dir_place_new_folder)) {
         // todo:
         if (overwrite_existing) {
-            spdlog::debug("fs::prepare_export_folder: removing dir {}", dir_place / new_folder);
-            remove_all(dir_place / new_folder);
+            spdlog::debug("fs::prepare_export_folder: removing dir {}", dir_place_new_folder.string());
+            remove_all(dir_place_new_folder);
         }
         else {
             int n = 2;
diff --git a/src/ct/ct_imports.cc b/src/ct/ct_imports.cc
index 20e5d01d..59947ee4 100644
--- a/src/ct/ct_imports.cc
+++ b/src/ct/ct_imports.cc
@@ -454,7 +454,7 @@ std::unique_ptr<CtImportedNode> CtPlainTextImport::import_file(const fs::path& f
         }
     }
     catch (std::exception& ex) {
-        spdlog::error("{}, what: {}, file: {}", __FUNCTION__, ex.what(), file);
+        spdlog::error("{}, what: {}, file: {}", __FUNCTION__, ex.what(), file.string());
     }
     return nullptr;
 }
diff --git a/src/ct/ct_main_win_file.cc b/src/ct/ct_main_win_file.cc
index 52540b7f..752f97ee 100644
--- a/src/ct/ct_main_win_file.cc
+++ b/src/ct/ct_main_win_file.cc
@@ -194,14 +194,14 @@ bool CtMainWin::file_open(const fs::path& filepath,
                         spdlog::debug("trying {} -> {}", curr_backup_file.string(), filepath.string());
                         new_storage = CtStorageControl::load_from(this, filepath, doc_type, error_or_warning, password);
                         if (new_storage) {
-                            spdlog::debug("OK recover from {}", curr_backup_file);
+                            spdlog::debug("OK recover from {}", curr_backup_file.string());
                             break;
                         }
                         fs::move_file(filepath, curr_backup_file);
                         spdlog::debug("moved back {} -> {}", filepath.string(), curr_backup_file.string());
                     }
                     else {
-                        spdlog::debug("?? backed up data, {} missing", curr_backup_file);
+                        spdlog::debug("?? backed up data, {} missing", curr_backup_file.string());
                         if (++missing_backup > 3) break;
                     }
                 }
@@ -445,7 +445,7 @@ void CtMainWin::mod_time_sentinel_restart()
 
 bool CtMainWin::file_insert_plain_text(const fs::path& filepath)
 {
-    spdlog::debug("trying to insert text file as node: {}", filepath);
+    spdlog::debug("trying to insert text file as node: {}", filepath.string());
     try {
         Glib::RefPtr<Gsv::Buffer> pBuffer = Gsv::Buffer::create();
         if (CtStrUtil::file_any_encoding_load_into_source_buffer(filepath.string(), pBuffer)) {
@@ -459,7 +459,7 @@ bool CtMainWin::file_insert_plain_text(const fs::path& filepath)
         }
     }
     catch (std::exception& ex) {
-        spdlog::error("{}, what: {}, file: {}", __FUNCTION__, ex.what(), filepath);
+        spdlog::error("{}, what: {}, file: {}", __FUNCTION__, ex.what(), filepath.string());
     }
     return false;
 }
diff --git a/src/ct/ct_storage_control.cc b/src/ct/ct_storage_control.cc
index 9a6e813a..34dd0a1b 100644
--- a/src/ct/ct_storage_control.cc
+++ b/src/ct/ct_storage_control.cc
@@ -443,7 +443,7 @@ Glib::RefPtr<Gsv::Buffer> CtStorageControl::get_delayed_text_buffer(const gint64
                 fs::get_doc_type_from_file_ext(filesInTmpDir.front()) == fs::get_doc_type_from_file_ext(temp_file_path) and
                 fs::move_file(filesInTmpDir.front(), temp_file_path))
             {
-                spdlog::debug("encrypt doc renamed {} -> {}", filesInTmpDir.front().filename(), temp_file_path.filename());
+                spdlog::debug("encrypt doc renamed {} -> {}", filesInTmpDir.front().filename().string(), temp_file_path.filename().string());
                 return temp_file_path;
             }
         }
@@ -476,7 +476,7 @@ Glib::RefPtr<Gsv::Buffer> CtStorageControl::get_delayed_text_buffer(const gint64
         return false;
     }
     if (not fs::is_regular_file(file_to)) {
-        spdlog::debug("!! is_regular_file {}", file_to);
+        spdlog::debug("!! is_regular_file {}", file_to.string());
         if (not tmp_prev_archive.empty()) {
             (void)fs::move_file(tmp_prev_archive, file_to);
         }
@@ -628,7 +628,7 @@ void CtStorageControl::_backupEncryptThread()
                                 break;
                             }
 #if defined(DEBUG_BACKUP_ENCRYPT)
-                            spdlog::debug("{} -> {}", tilda_node_dir_from, tilda_node_dir_to);
+                            spdlog::debug("{} -> {}", tilda_node_dir_from.string(), tilda_node_dir_to.string());
 #endif // DEBUG_BACKUP_ENCRYPT
                         }
                         tilda_dirpath = tilda_dirpath.string().substr(0, tilda_dirpath.string().size()-1);
@@ -647,7 +647,7 @@ void CtStorageControl::_backupEncryptThread()
                 }
 #if defined(DEBUG_BACKUP_ENCRYPT)
                 else {
-                    spdlog::debug("{} -> {}", pBackupEncryptData->main_backup, tilda_node_dir_to);
+                    spdlog::debug("{} -> {}", pBackupEncryptData->main_backup, tilda_node_dir_to.string());
                 }
 #endif // DEBUG_BACKUP_ENCRYPT
             }
diff --git a/src/ct/ct_storage_multifile.cc b/src/ct/ct_storage_multifile.cc
index ebd729e0..b7b10b4d 100644
--- a/src/ct/ct_storage_multifile.cc
+++ b/src/ct/ct_storage_multifile.cc
@@ -284,7 +284,7 @@ void CtStorageMultiFile::_hier_try_move_node(const fs::path& dir_path_to)
     };
     f_find_dir_from(_dir_path);
     if (not dir_path_from.empty()) {
-        spdlog::debug("{} -> {}", dir_path_from, dir_path_to);
+        spdlog::debug("{} -> {}", dir_path_from.string(), dir_path_to.string());
         fs::move_file(dir_path_from, dir_path_to);
     }
 }
@@ -520,7 +520,7 @@ bool CtStorageMultiFile::populate_treestore(const fs::path& dir_path, Glib::ustr
                     const fs::path curr_backup_dir = first_backup_dir + str::repeat(CtConst::CHAR_TILDE, b).raw();
                     if (fs::is_directory(curr_backup_dir)) {
                         missing_backup = 0;
-                        spdlog::debug("backed up data, {} found", curr_backup_dir);
+                        spdlog::debug("backed up data, {} found", curr_backup_dir.string());
                         const fs::path backup_node_xml_path = curr_backup_dir / nodedir.filename() / NODE_XML;
                         try {
                             pParser = CtStorageXml::get_parser(backup_node_xml_path);
@@ -541,7 +541,7 @@ bool CtStorageMultiFile::populate_treestore(const fs::path& dir_path, Glib::ustr
                         }
                     }
                     else {
-                        spdlog::debug("?? backed up data, {} missing", curr_backup_dir);
+                        spdlog::debug("?? backed up data, {} missing", curr_backup_dir.string());
                         if (++missing_backup > 3) break;
                     }
                 }

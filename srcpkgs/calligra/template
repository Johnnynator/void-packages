# Template file for 'calligra'
pkgname=calligra
version=4.0.1
revision=1
build_style=cmake
build_helper=qemu
configure_args="-DCALLIGRA_SHOULD_BUILD_UNMAINTAINED=ON
 -DBUILD_TESTING=OFF -DKF6_HOST_TOOLING=/usr/lib/cmake"
hostmakedepends="pkg-config extra-cmake-modules gettext
 qt6-base qt6-tools qt6-declarative-host-tools calligra-devtools
 kf6-kdoctools"
makedepends="ecm-devel phonon-devel
 exiv2-devel gsl-devel qt6-declarative-devel
 kf6-kcmutils-devel kdiagram6-devel qtkeychain-qt6-devel
 kf6-kholidays-devel lcms2-devel eigen libokular-devel
 libetonyek-devel libgit2-devel libodfgen-devel kwallet-devel
 libopenexr-devel libspnav-devel libvisio-devel libwpg-devel libwps-devel
 poppler-qt6-devel qca-qt6-devel kf6-threadweaver-devel
 kf6-knotifyconfig-devel kf6-sonnet-devel kf6-kparts-devel kf6-kxmlgui-devel
 kf6-kconfigwidgets-devel kf6-kconfig-devel kf6-ktextwidgets-devel kf6-kcrash-devel
 kf6-kio-devel kf6-kiconthemes-devel $(vopt_if webengine 'qt6-webengine-devel')"
depends="calligra-filters calligra-libs calligra-plugins calligra-karbon
 calligra-kexi calligra-stage calligra-sheets calligra-extras
 calligra-words calligra-handbook calligra-gemini calligra-plan"
short_desc="Illustration application"
maintainer="John <me@johnnynator.dev>"
license="GPL-2.0-or-later, LGPL-2.0-or-later, GFDL-1.2-or-later"
homepage="https://www.calligra-suite.org/"
distfiles="${KDE_SITE}/calligra/calligra-${version}.tar.xz"
checksum=d401f5e73f4f1bdc0b3548ea1a50b0ac1778c1ede30a6a335944ed7fbd88d95f

replaces="calligra-braindump>=0 calligra-flow>=0"

build_options="webengine"
desc_option_webengine="Use Qt6 WebEngine for Webshape Plugin"

if [ "$XBPS_WORDSIZE$XBPS_WORDSIZE" = "64$XBPS_TARGET_WORDSIZE" ]; then
	build_options_default="webengine"
fi

do_install() {
	vdoc README.md
}

calligra-filters_package() {
	short_desc+=" - filters"
	depends="pstoedit"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
			cmake -P ${wrksrc}/build/filters/cmake_install.cmake
	}
}

calligra-libs_package() {
	short_desc+=" - libraries"
	pkg_install() {
		for d in interfaces libs pics servicetypes; do
			DESTDIR=$PKGDESTDIR \
			cmake -P ${wrksrc}/build/${d}/cmake_install.cmake
		done
	}
}

calligra-plugins_package() {
	short_desc+=" - plugins"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/plugins/cmake_install.cmake
	}
}

calligra-karbon_package() {
	short_desc+=" - Create scalable vector drawings"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/karbon/cmake_install.cmake
	}
}

calligra-kexi_package() {
	build_style=meta
	depends="kexi"
	short_desc+=" - Develop desktop db apps (transitional dummy package)"
}

calligra-stage_package() {
	short_desc+=" - Write presentation documents"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/stage/cmake_install.cmake
	}
}

calligra-krita_package() {
	build_style=meta
	short_desc+=" - Edit and paint images (transitional dummy package)"
	depends="krita>=${version}_${revision}"
}

calligra-sheets_package() {
	short_desc+=" - Write spreadsheet documents"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/sheets/cmake_install.cmake
	}
}

calligra-words_package() {
	short_desc+=" - Word Processor"
	depends="calligra-plugins"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/words/cmake_install.cmake
	}
}

calligra-handbook_package() {
	build_style=meta
	short_desc+=" - Documentation (removed temporarily)"
	#pkg_install() {
	#	DESTDIR=$PKGDESTDIR \
	#	cmake -P ${wrksrc}/build/doc/calligra/cmake_install.cmake
	#}
}

calligra-extras_package() {
	short_desc+=" - Extras"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/extras/cmake_install.cmake
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/data/cmake_install.cmake
	}
}

calligra-devtools_package() {
	short_desc+=" - Developer tools"
	pkg_install() {
		DESTDIR=$PKGDESTDIR \
		cmake -P ${wrksrc}/build/devtools/cmake_install.cmake
	}
}

calligra-gemini_package() {
	build_style=meta
	short_desc+=" - QML interface for Calligra Words and Stage (removed temporarily)"
	#pkg_install() {
	#	DESTDIR=$PKGDESTDIR \
	#	cmake -P ${wrksrc}/build/components/cmake_install.cmake
	#	DESTDIR=$PKGDESTDIR \
	#	cmake -P ${wrksrc}/build/gemini/cmake_install.cmake
	#}
}

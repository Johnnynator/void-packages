# Template file for 'qt5'
pkgname=qt5
version=5.14.2
revision=2
build_style=meta
wrksrc="qtbase-everywhere-src-${version}"
hostmakedepends="pkg-config which perl"
makedepends="libmysqlclient-devel postgresql-libs-devel harfbuzz-devel
 libressl-devel fontconfig-devel zlib-devel icu-devel sqlite-devel
 libjpeg-turbo-devel gtk+3-devel Vulkan-Headers tslib-devel cups-devel
 double-conversion-devel freetds-devel libzstd-devel pcre2-devel
 libinput-devel mtdev-devel xcb-util-image-devel xcb-util-keysyms-devel
 xcb-util-renderutil-devel xcb-util-wm-devel unixodbc-devel libproxy-devel"
depends="qt5-dbus qt5-gui qt5-core qt5-widgets qt5-network qt5-xml
 qt5-test qt5-sql qt5-concurrent qt5-printsupport qt5-opengl"
short_desc="Cross-platform application and UI framework (QT5)"
maintainer="Jürgen Buchmüller <pullmoll@t-online.de>"
license="GPL-3.0-or-later, LGPL-3.0-or-later"
homepage="https://qt.io/"
distfiles="http://download.qt.io/official_releases/qt/${version%.*}/${version}/submodules/qtbase-everywhere-src-${version}.tar.xz"
checksum=48b9e79220941665a9dd827548c6428f7aa3052ccba8f4f7e039a94aa1d2b28a
python_version=2 #unverified
replaces="qt5-doc<5.6.0 qt5-quick1<5.6.0 qt5-quick1-devel<5.6.0 qt5-webkit<5.6.0 qt5-webkit-devel<5.6.0
 qt5-enginio<5.7.1 qt5-enginio-devel<5.7.1 qt5-plugin-gtk<5.7.1 qt5-canvas3d<5.13.0"
lib32mode=full
patch_args="-Np1"

# Work around SSLv3_{client,server}_method missing in libressl-2.3.3
CFLAGS="-DOPENSSL_NO_PSK -DOPENSSL_NO_NEXTPROTONEG"
CXXFLAGS="${CFLAGS} -Wno-deprecated-declarations -Wno-class-memaccess -Wno-packed-not-aligned"

build_options="gles"

case "$XBPS_TARGET_MACHINE" in
	aarch64*|arm*) build_options_default="gles";;
esac

if [ "$CROSS_BUILD" ]; then
	# Need some devel packages in the host to build qmake, moc, uic, rcc
	# wayland-devel contains /usr/bin/wayland-scanner
	hostmakedepends+=" icu-devel wayland-devel zlib-devel"
	hostmakedepends+=" postgresql-libs-devel"
fi

_move_target_binaries() {
	local f
	[ -z "$CROSS_BUILD" ] && return 0
	vmkdir usr/lib/qt5/bin
	for f in $@; do
		if [ -f ${DESTDIR}/usr/lib/qt5/bin/${f}-target ]; then
			mv -v ${DESTDIR}/usr/lib/qt5/bin/${f}-target \
				${PKGDESTDIR}/usr/lib/qt5/bin/${f}
		fi
	done
}

_create_config() {
	local specs=${wrksrc}/mkspecs/devices device="$1"
	local qmake_conf="${specs}/${device}/qmake.conf"

	mkdir -p ${specs}/${device}

	echo "#" > ${qmake_conf}
	echo "# qmake configuration for building with $XBPS_TARGET_MACHINE" >> ${qmake_conf}
	echo "#" >> ${qmake_conf}
	echo >> ${qmake_conf}
	echo "include(../common/linux_device_pre.conf)" >> ${qmake_conf}
	echo >> ${qmake_conf}
	# Fake distro name to tell we want control
	echo "DISTRO = arch" >> ${qmake_conf}
	# Hard float on armv6, armv7, not on armv5tel
	case "$XBPS_TARGET_MACHINE" in
		armv6*|armv7*)
			echo "DISTRO_OPTS += hard-float" >> ${qmake_conf}
			;;
	esac
	echo "QMAKE_CC = ${CC}" >> ${qmake_conf}
	echo "QMAKE_CXX = ${CXX}" >> ${qmake_conf}
	echo "QMAKE_LINK = ${CXX}" >> ${qmake_conf}
	echo "QMAKE_LINK_SHLIB = ${CXX}" >> ${qmake_conf}
	echo "QMAKE_LFLAGS = ${LDFLAGS}" >> ${qmake_conf}
	echo "QMAKE_CFLAGS = ${CFLAGS}" >> ${qmake_conf}
	echo "QMAKE_CXXFLAGS = ${CXXFLAGS}" >> ${qmake_conf}
	echo >> ${qmake_conf}
	case "$XBPS_TARGET_MACHINE" in
		arm*)
			echo "include(../common/linux_arm_device_post.conf)" >> ${qmake_conf} ;;
		*)
			echo "include(../common/linux_device_post.conf)" >> ${qmake_conf} ;;
	esac
	echo "load(qt_config)" >> ${qmake_conf}

	echo '#include "../../linux-g++/qplatformdefs.h"' > ${specs}/${device}/qplatformdefs.h
}

do_configure() {
	source ${FILESDIR}/shared_functions.sh
	local opts spec

	case "$XBPS_TARGET_MACHINE" in
	mips*) grep -rl "<sgidefs.h>" | xargs sed -i -e "s;<sgidefs.h>;<asm/sgidefs.h>;" ;;
	esac

	# Cross build patches
	if [ "$CROSS_BUILD" ]; then
		# This also sets default {C,CXX,LD}FLAGS for projects built using qmake
		vsed -i -e "s|^\(QMAKE_CFLAGS_RELEASE.*\)|\1 ${XBPS_CFLAGS}|" \
			${wrksrc}/mkspecs/common/gcc-base.conf
		vsed -i -e "s|^\(QMAKE_LFLAGS_RELEASE.*\)|\1 ${XBPS_LDFLAGS}|" \
			${wrksrc}/mkspecs/common/g++-unix.conf

		# Create symbolic links for private include directories
		for d in $(ls ${wrksrc}/include); do
			ln -sfv ${version}/${d}/private include/${d}/private
		done
	else
		# qmake {CXX,L}FLAGS patches
		vsed -i -e "s|^\(CXXFLAGS =.*\)|\1 ${CXXFLAGS}|" \
			-e "s|^\(LFLAGS =.*\)|\1 ${LDFLAGS}|" \
			${wrksrc}/qmake/Makefile.unix

		# Build qmake using Void {C,LD}FLAGS
		# This also sets default {C,CXX,LD}FLAGS for projects built using qmake
		vsed -i -e "s|^\(QMAKE_CFLAGS_RELEASE.*\)|\1 ${CFLAGS}|" \
			${wrksrc}/mkspecs/common/gcc-base.conf
		vsed -i -e "s|^\(QMAKE_LFLAGS_RELEASE.*\)|\1 ${LDFLAGS}|" \
			${wrksrc}/mkspecs/common/g++-unix.conf
	fi

	opts+=" -confirm-license"
	opts+=" -opensource"
	opts+=" -prefix /usr"
	opts+=" -bindir /usr/lib/qt5/bin"
	opts+=" -datadir /usr/share/qt5"
	opts+=" -headerdir /usr/include/qt5"
	opts+=" -sysconfdir /etc/xdg"
	opts+=" -plugindir /usr/lib/qt5/plugins"
	opts+=" -docdir /usr/share/doc/qt5"
	opts+=" -importdir /usr/lib/qt5/imports"
	opts+=" -translationdir /usr/share/qt5/translations"
	opts+=" -examplesdir /usr/share/qt5/examples"
	opts+=" -archdatadir /usr/lib/qt5"
	opts+=" -accessibility"
	opts+=" -fontconfig"
	opts+=" -icu"
	opts+=" -openssl-linked"
	opts+=" -dbus-linked"
	opts+=" -sql-mysql"
	opts+=" -mysql_config ${XBPS_CROSS_BASE}/usr/bin/mysql_config"
	opts+=" -sql-psql"
	opts+=" -psql_config /usr/bin/pg_config"
	opts+=" -no-pch"
	opts+=" -no-strip"
	opts+=" -nomake examples"
	# opts+=" -opengl dynamic"
	opts+=" -no-use-gold-linker"
	opts+=" -system-libjpeg"
	opts+=" -system-libpng"
	opts+=" -system-zlib"
	opts+=" -system-sqlite"
	opts+=" -system-harfbuzz"
	if [ "$build_option_gles" ]; then
		opts+=" -opengl-es-2"
		opts+=" -opengles3"
	fi
	opts+=" -no-feature-eglfs_brcm" # missing include path
	opts+=" -silent"
	# opts+=" -v"
	LDFLAGS+=" -Wl,--no-keep-memory"  # needs more than 8GB RAM else
	if [ "$CROSS_BUILD" ]; then
		spec=void-${XBPS_CROSS_TRIPLET}-g++
		_create_config ${spec}
		opts+=" -device ${spec}"
		opts+=" -device-option CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
		opts+=" -sysroot ${XBPS_CROSS_BASE}"
		opts+=" -hostprefix host"
		opts+=" -extprefix /usr"

	fi

	MAKEFLAGS="${makejobs}" \
	CC="cc" CXX="c++" CPP="cpp" LD="c++" AR="ar" AS="as" NM="nm" \
	OBJDUMP="objdump" STRIP="strip" RANLIB="ranlib" \
	CFLAGS="$XBPS_CFLAGS" CXXFLAGS="$XBPS_CXXFLAGS" \
	CPPFLAGS="$XBPS_CPPFLAGS" LDFLAGS="$XBPS_LDFLAGS" \
	LFLAGS="$XBPS_LDFLAGS" \
		${wrksrc}/configure ${opts}
	export LD_LIBRARY_PATH="${wrksrc}/lib:${wrksrc}/qttools/lib:${LD_LIBRARY_PATH}"
}

do_build() {
	make ${makejobs}
}

do_install() {
	source ${FILESDIR}/shared_functions.sh
	local f base bin dir dirs

	if [ -z "$CROSS_BUILD" ]; then
		unset CC CXX LD CPP AR AS RANLIB
	fi
	cd ${wrksrc}/
	make INSTALL_ROOT=${DESTDIR} install

	_cleanup_wrksrc_leak

	# Symbolic links for remaining binaries
	vmkdir usr/bin
	for f in $(find ${DESTDIR}/usr/lib/qt5/bin -type f); do
		base=${f##*/}
		ln -sf /usr/lib/qt5/bin/${base} ${PKGDESTDIR}/usr/bin/${base}-qt5
	done

	if [ "$CROSS_BUILD" ]; then
		vmkdir usr/bin
		vmkdir usr/lib/qt5/bin

		#
		# Build qmake for the target
		#
		_msg_cross "Building qmake"
		cd ${wrksrc}/qmake
		sed Makefile \
			-e"s;^\(CC\\s*=\).*;\1 $CC;" \
			-e"s;^\(CXX\\s*=\).*;\1 $CXX;" \
			-e"s;^\(LINK\\s*=\).*;\1 $CXX;" \
			-e"s;^\(QMAKE_CFLAGS\\s*=\).*;\1 $CFLAGS;" \
			-e"s;^\(QMAKE_CXXFLAGS\\s*=\).*;\1 $CXXFLAGS;" \
			-e"s;^\(QMAKE_LFLAGS\\s*=\).*;\1 $LDFLAGS;" \
			-e"s;\$(BUILD_PATH)/bin;${PKGDESTDIR}/usr/lib/qt5/bin;" \
			> Makefile.target
		make clean
		make -f Makefile.target ${makejobs}
		ln -sf ../lib/qt5/bin/qmake ${PKGDESTDIR}/usr/bin/qmake-qt5
		cp -ar ${wrksrc}/mkspecs ${PKGDESTDIR}/usr/lib/qt5

		#
		# Build various tools for the target
		#
		dirs+=" src/tools/moc"
		dirs+=" src/tools/rcc"
		dirs+=" src/tools/uic"
		dirs+=" src/tools/qdbuscpp2xml"
		dirs+=" src/tools/qdbusxml2cpp"
		dirs+=" src/tools/qvkgen"
		dirs+=" src/tools/tracegen"
		dirs+=" src/tools/qlalr"

		for f in ${dirs}; do
			_host_tooling_for_target $f
		done
	fi
	# Remove builddir from installation
	rm -rf ${DESTDIR}/builddir
}

qt5-gui_package() {
	short_desc+=" - Gui"
	pkg_install() {
		vmove "usr/lib/libQt5Gui.so*"
		vmove "usr/lib/libQt5XcbQpa.so*"
		vmove "usr/lib/libQt5EglFSDeviceIntegration.so*"
		vmove "usr/lib/libQt5EglFsKmsSupport.so*"
		vmove usr/lib/qt5/plugins/generic
		vmove usr/lib/qt5/plugins/platforms
		vmove usr/lib/qt5/plugins/xcbglintegrations
		vmove usr/lib/qt5/plugins/imageformats
		vmove usr/lib/qt5/plugins/egldeviceintegrations
		vmove usr/lib/qt5/plugins/platforminputcontexts
		vmove usr/lib/qt5/plugins/platformthemes
	}
}

qt5-dbus_package() {
	short_desc+=" - DBus"
	pkg_install() {
		vmove "usr/lib/libQt5DBus.so*"
	}
}

qt5-core_package() {
	short_desc+=" - Core"
	pkg_install() {
		vmove "usr/lib/libQt5Core.so*"
	}
}

qt5-opengl_package() {
	short_desc+=" - OpenGL"
	pkg_install() {
		vmove "usr/lib/libQt5OpenGL.so*"
	}
}

qt5-printsupport_package() {
	short_desc+=" - Print Support"
	pkg_install() {
		vmove "usr/lib/libQt5PrintSupport.so*"
		vmove usr/lib/qt5/plugins/printsupport
	}
}

qt5-concurrent_package() {
	short_desc+=" - Concurrency"
	pkg_install() {
		vmove "usr/lib/libQt5Concurrent.so*"
	}
}

qt5-widgets_package() {
	short_desc+=" - Widgets"
	pkg_install() {
		vmove "usr/lib/libQt5Widgets.so*"
	}
}

qt5-network_package() {
	short_desc+=" - Network"
	pkg_install() {
		vmove "usr/lib/libQt5Network.so*"
		vmove usr/lib/qt5/plugins/bearer
	}
}

qt5-sql_package() {
	short_desc+=" - Sql"
	pkg_install() {
		vmove "usr/lib/libQt5Sql.so*"
	}
}

qt5-test_package() {
	short_desc+=" - Test"
	pkg_install() {
		vmove "usr/lib/libQt5Test.so*"
	}
}

qt5-xml_package() {
	short_desc+=" - Xml"
	pkg_install() {
		vmove "usr/lib/libQt5Xml.so*"
	}
}

qt5-base-docs_package() {
	short_desc+=" - Documentation"
	pkg_install() {
		vmove usr/share/doc/qt5
	}
}

qt5-examples_package() {
	short_desc+=" - Examples"
	depends="qt5-devel-${version}_${revision} qt5-qmake-${version}_${revision}
		qt5-host-tools-${version}_${revision}"
	pkg_install() {
		local dir mod base=usr/share/qt5/examples
		vmkdir ${base}
		vcopy examples/examples.pro ${base}/
		# Copy examples source
		for dir in $(find ${wrksrc} -maxdepth 2 -type d -name examples); do
			mod=${dir%/examples}
			mod=${mod##*/}
			vcopy ${dir}/* ${base}/
			if [ -e "${PKGDESTDIR}/${base}/README" ]; then
				mv ${PKGDESTDIR}/${base}/README{,.${mod}}
			fi
		done
	}
}

qt5-devel_package() {
	depends="zlib-devel libressl-devel>=2.1.4 libXext-devel libXrender-devel
		fontconfig-devel libglib-devel MesaLib-devel mtdev-devel
		dbus-devel icu-devel cups-devel
		qt5-gui-${version}_${revision}
		qt5-dbus-${version}_${revision}
		qt5-core-${version}_${revision}
		qt5-widgets-${version}_${revision}
		qt5-qmake-${version}_${revision}
		qt5-opengl-${version}_${revision}
		qt5-printsupport-${version}_${revision}
		qt5-concurrent-${version}_${revision}
		qt5-sql-${version}_${revision}
		qt5-test-${version}_${revision}
		qt5-network-${version}_${revision}
		qt5-xml-${version}_${revision}
		qt5-host-tools-${version}_${revision}"
	short_desc+=" - Development files"
	# qt5-enginio-devel is gone
	pkg_install() {
		source ${FILESDIR}/shared_functions.sh
		vmove usr/include
		vmove usr/lib/*.a
		vmove usr/lib/*.prl
		vmove usr/lib/cmake
		vmove usr/lib/pkgconfig
		_cleanup_wrksrc_leak
	}
}

qt5-plugin-odbc_package() {
	short_desc+=" - ODBC plugin"
	pkg_install() {
		vmove usr/lib/qt5/plugins/sqldrivers/libqsqlodbc.so
	}
}

qt5-plugin-pgsql_package() {
	short_desc+=" - PostgreSQL plugin"
	pkg_install() {
		vmove usr/lib/qt5/plugins/sqldrivers/libqsqlpsql.so
	}
}

qt5-plugin-mysql_package() {
	short_desc+=" - MySQL plugin"
	pkg_install() {
		vmove usr/lib/qt5/plugins/sqldrivers/libqsqlmysql.so
	}
}

qt5-plugin-sqlite_package() {
	short_desc+=" - SQLite plugin"
	pkg_install() {
		vmove usr/lib/qt5/plugins/sqldrivers/libqsqlite.so
	}
}

qt5-plugin-tds_package() {
	short_desc+=" - TDS plugin"
	pkg_install() {
		vmove usr/lib/qt5/plugins/sqldrivers/libqsqltds.so
	}
}

qt5-base-tools_package() {
	short_desc+=" - Tools"
	pkg_install() {
		for f in uic tracegen syncqt.pl rcc qvkgen qlalr qdbusxml2cpp \
			qdbuscpp2xml moc fixqt4headers.pl; do
			vmove usr/bin/$f-qt5
			vmove usr/lib/qt5/bin/$f
		done
	}
}

qt5-qmake_package() {
	short_desc+=" - Qmake Makefile generator tool"
	depends="qtchooser"
	pkg_install() {
		vmove usr/lib/qt5/bin/qmake
		vmove usr/lib/qt5/mkspecs
		vmove usr/bin/qmake-qt5

		# Change -isystem to -I to avoid "#include_next <stdlib.h>" errors
		vsed -i ${PKGDESTDIR}/usr/lib/qt5/mkspecs/common/gcc-base.conf \
			-e '/^QMAKE_CFLAGS_ISYSTEM/s;-isystem;-I;'
		find ${PKGDESTDIR} -iname "*.prl" -exec sed -i "{}" \
			-e 's%/usr/lib/lib\([^[:space:]]*\)\.[sa][o]*%-l\1%g' \;
		find ${PKGDESTDIR} -iname "*.pri" -exec sed -i "{}" \
			-e 's%/usr/lib/lib\([^[:space:]]*\)\.[sa][o]*%-l\1%g' \;

		# Undo changes to mkspecs/common/gcc-base.conf and g++-unix.conf
		if [ "$CROSS_BUILD" ]; then
			vsed -i ${PKGDESTDIR}/usr/lib/qt5/mkspecs/common/gcc-base.conf \
				-e "s|^\(QMAKE_CFLAGS_RELEASE.*\) ${XBPS_CFLAGS}|\1|"
			vsed -i ${PKGDESTDIR}/usr/lib/qt5/mkspecs/common/g++-unix.conf \
				-e "s|^\(QMAKE_LFLAGS_RELEASE.*\) ${XBPS_LDFLAGS}|\1|"
		else
			vsed -i ${PKGDESTDIR}/usr/lib/qt5/mkspecs/common/gcc-base.conf \
				-e "s|^\(QMAKE_CFLAGS_RELEASE.*\) ${CFLAGS}|\1|"
			vsed -i ${PKGDESTDIR}/usr/lib/qt5/mkspecs/common/g++-unix.conf\
				-e "s|^\(QMAKE_LFLAGS_RELEASE.*\) ${LDFLAGS}|\1|"
		fi
	}
}

qt5-xcb-private-headers_package() {
	short_desc+=" - Private headers for Qt5 Xcb"
	depends="qt5-devel"
	pkg_install() {
		for f in ${wrksrc}/src/plugins/platforms/xcb/*.h; do
			vinstall $f 644 usr/include/qt5xcb-private
		done
	}
}
